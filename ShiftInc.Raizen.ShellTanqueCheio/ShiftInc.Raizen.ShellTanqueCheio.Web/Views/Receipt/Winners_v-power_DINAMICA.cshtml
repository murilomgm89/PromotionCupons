@model ShiftInc.Raizen.ShellTanqueCheio.Web.Models.ReceiptSaveViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Winners</title>
    <link rel="stylesheet" href="/Content/css/index.css">

    <script src="//assets.adobedtm.com/9b74220da1d0b361973dbd26a530b8f49255d00c/satelliteLib-b69ce53ba3fa1db9f06b40a159d15cee47132b4e.js"></script>
</head>
<body style="background: #fff;">
    <div class="winners">
        <ul>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "A" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "A" ? "class=active" : "" : "")>A</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "B" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "B" ? "class=active" : "" : "")>B</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "C" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "C" ? "class=active" : "" : "")>C</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "D" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "D" ? "class=active" : "" : "")>D</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "E" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "E" ? "class=active" : "" : "")>E</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "F" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "F" ? "class=active" : "" : "")>F</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "G" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "G" ? "class=active" : "" : "")>G</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "H" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "H" ? "class=active" : "" : "")>H</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "I" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "I" ? "class=active" : "" : "")>I</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "J" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "J" ? "class=active" : "" : "")>J</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "K" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "K" ? "class=active" : "" : "")>K</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "L" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "L" ? "class=active" : "" : "")>L</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "M" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "M" ? "class=active" : "" : "")>M</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "N" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "N" ? "class=active" : "" : "")>N</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "O" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "O" ? "class=active" : "" : "")>O</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "P" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "P" ? "class=active" : "" : "")>P</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "Q" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "Q" ? "class=active" : "" : "")>Q</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "R" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "R" ? "class=active" : "" : "")>R</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "S" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "S" ? "class=active" : "" : "")>S</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "T" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "T" ? "class=active" : "" : "")>T</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "U" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "U" ? "class=active" : "" : "")>U</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "V" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "V" ? "class=active" : "" : "")>V</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "W" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "W" ? "class=active" : "" : "")>W</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "X" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "X" ? "class=active" : "" : "")>X</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "Y" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "Y" ? "class=active" : "" : "")>Y</a></li>
            <li><a href="javascript:void(0);" @(Request.QueryString["letra"] != null ? Request.QueryString["letra"] == "Z" ? "class=active" : "" : Model.Receipts.Count() != 0 ? Model.Receipts.OrderBy(r => r.Person.name).First().Person.name.Substring(0, 1).ToUpper() == "Z" ? "class=active" : "" : "")>Z</a></li>
        </ul>
        @{
            if (Model.Receipts.Count != 0)
            {
                var index = "";
                var classActive = "";
                var letra = Request.QueryString["letra"] ?? "A";
                if (letra == null || letra == "")
                {
                    classActive = "class='active'";
                }

                string filter = "áàãâäéèêíìîóòôõúùûç";
                string accents = "aaaaaeeeiiioooouuuc";

                Dictionary<string, List<ShiftInc.Raizen.ShellTanqueCheio.Entity.Receipt>> letras = new Dictionary<string, List<ShiftInc.Raizen.ShellTanqueCheio.Entity.Receipt>>();

                foreach (var winner in Model.Receipts.OrderBy(r => r.Person.name))
                {
                    var inicial = winner.Person.name.Substring(0, 1).ToUpper();

                    if (filter.Contains(inicial.ToLower()))
                    {
                        inicial = accents.Substring(filter.IndexOf(inicial.ToLower()), 1);
                    }

                    if (!letras.ContainsKey(inicial))
                    {
                        letras.Add(inicial, new List<ShiftInc.Raizen.ShellTanqueCheio.Entity.Receipt>());
                    }

                    letras[inicial].Add(winner);
                }

                foreach (var k in letras)
                {
                    <table data-index="@k.Key" class="@Html.Raw(letra.Equals(k.Key) ? "active" : "")">
                        <thead>
                            <tr>
                                <th>Nome</th>
                                <th>CPF</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var winner in k.Value)
                            {
                                <tr>
                                    <td>@winner.Person.name</td>
                                    <td>@(winner.Person.cpf.Substring(0, 3) + ".XXX.XXX-XX")</td>
                                    <td>@winner.Person.Address.City.state</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }


                /*bool start = true;
                foreach (var winner in Model.Receipts.OrderBy(r => r.Person.name))
                {
                    var SubstringName = winner.Person.name.Substring(0, 1).ToUpper();
                    if (SubstringName != index)
                    {
                        if (!start)
                        {
                            @Html.Raw("</tbody></table>");
                        }
                        if (letra == SubstringName)
                        {
                            classActive = "class='active'";
                        }

                        @Html.Raw("<table data-index='" + SubstringName + "' " + classActive + "><thead><tr><th>Nome</th><th>CPF</th><th>Estado</th></tr></thead><tbody>");
                        start = false;
                    }

                    @Html.Raw("<tr>");
                    @Html.Raw("<td>" + winner.Person.name + "</td>");
                    @Html.Raw("<td>" + winner.Person.cpf.Substring(0, 3) + ".XXX.XXX-XX</td>");
                    @Html.Raw("<td>" + winner.Person.Address.City.state + "</td>");
                    @Html.Raw("</tr>");
                    index = SubstringName;
                    classActive = "";
                }
                @Html.Raw("</tbody></table>");   */

            }
        }
    </div>

    <script src="/Scripts/js.js"></script>
</body>
</html>
